#!/usr/bin/env python3
"""
Convenience node to log model weights when training.

License:
  BSD 3-Clause License
  Copyright (c) 2021, Autonomous Robotics Club of Purdue (Purdue ARC)
  All rights reserved.
"""

import rospy
from std_msgs.msg import String
from diagnostic_msgs.msg import DiagnosticStatus, KeyValue

class Logger(object):
    """Log model weights during training."""
    def __init__(self):
        rospy.init_node('model_weight_logger')

        # Constants
        self.LOG_DIR = rospy.get_param('~log_dir')
        self.FREQUENCY = rospy.get_param('~log_freq', 100)

        # Subscribers
        rospy.Subscriber('snake/dqn/training', DiagnosticStatus, self.progress_cb)

        # Services (TODO make service when snake_dqn updates)
        self.log_pub = rospy.Publisher('snake/dqn/save_weights', String, queue_size=1)

        rospy.spin()

    def progress_cb(self, progress_msg):
        """Track training progress and save when configured to."""
        episode = None
        for kv in progress_msg.values:
            if kv.key == "episode":
                episode = int(kv.value)

        if episode is None:
            rospy.logerr("Bad progress message.")
            return

        if episode % self.FREQUENCY == 0:
            self.log_pub.publish(self.LOG_DIR + f"episode_{episode:04d}_weights.pt")

if __name__ == "__main__":
    Logger()
