#!/usr/bin/env python

"""Contains the TrajectoryPlannerROS Node.

License:
  BSD 3-Clause License
  Copyright (c) 2020, Autonomous Robotics Club of Purdue (Purdue ARC)
  All rights reserved.
  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:
  1. Redistributions of source code must retain the above copyright notice, this
     list of conditions and the following disclaimer.
  2. Redistributions in binary form must reproduce the above copyright notice,
     this list of conditions and the following disclaimer in the documentation
     and/or other materials provided with the distribution.
  3. Neither the name of the copyright holder nor the names of its
     contributors may be used to endorse or promote products derived from
     this software without specific prior written permission.
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from threading import Lock
import rospy 

from geometry_msgs.msg import PoseWithCovarianceStamped, PoseArray, Pose
from nav_msgs.msg import Odometry
from std_msgs.msg import Float64
import math

class TrajectoryPlannerROS(object):
	"""A node to plan local car trajectories."""
	def __init__(self):
        rospy.init_node('trajectory_planner_node')
        self.lock = Lock()
        rate = rospy.Rate(30) # Hz

        # Variables
        # no idea what speed will be yet
        self.ball_pose = None
        self.goal_pose = None
        self.final_vector = None
        self.MOVE_SPEED = 1.0
        self.FINAL_SPEED = 1.0

		# Publishers
        self.path_pub = rospy.Publisher("bot_path", PoseArray, queue_size=1)
        self.final_speed_pub = rospy.Publisher("bot_final_speed", Float64, queue_size=1)

		# Subscribers
        rospy.Subscriber("ball_pose", PoseWithCovarianceStamped, self.ball_pose_cb)
        rospy.Subscriber("goal_pose", PoseWithCovarianceStamped, self.goal_pose_cb)

        while not rospy.is_shutdown():
            self.loop_once()
            try:
                rate.sleep()
            except rospy.ROSInterruptException:
                pass

	def loop_once(self):
		"""Main loop."""
		self.lock.acquire()
		# Loop code
		self.lock.release()

    def ball_pose_cb(self, ball_pose_message):
        """Callback for getting ball pose"""
        self.ball_pose = ball_pose_message.data

    def goal_pose_cb(self, goal_pose_message):
        """Callback for getting goal pose"""
        self.goal_pose = goal_pose_message.data

    def calculate_final_vector():
        """Calculate final vector (final heading) and possibly make line equation"""
        self.final_vector = (self.goal_pose.position.x - self.ball_pose.position.x, self.goal_pose.position.y - self.ball_pose.position.y)
        mag = math.sqrt(self.final_vector[0]**2 + self.final_vector[1]**2)
        self.final_vector = (self.final_vector[0]/mag, self.final_vector[1]/mag)

    def generate_points():
        """Generate 4 points using spline generation"""
        if self.final_heading !== None:
            print ("some stuff")
    
    def create_path():
        """
        Take the main points, and create more points bot can follow by smoothing it,
        either via Bezier curves, or Legrange functions.
        Publish these points as an array, resulting in path
        """
        print ("create path")

if __name__ == "__main__":
	TrajectoryPlannerROS()