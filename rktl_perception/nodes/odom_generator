#!/usr/bin/env python3  
"""Very simple node to estimate odometry from poses over time.
License:
  BSD 3-Clause License
  Copyright (c) 2020, Autonomous Robotics Club of Purdue (Purdue ARC)
  All rights reserved.
"""

# ROS
import rospy
from nav_msgs.msg import Odometry
from geometry_msgs.msg import PoseWithCovarianceStamped
from tf.transformations import euler_from_quaternion, quaternion_from_euler

import collections
from threading import Lock

rospy.set_param('buffer_size', 10)
buffer_size = rospy.get_param('buffer_size')
buffer = collections.deque(maxlen=buffer_size)
lock = Lock()

def callback(pose):
  x = pose.pose.pose.position.x
  y = pose.pose.pose.position.y
  __, __, yaw = euler_from_quaternion([
    pose.pose.pose.orientation.x,
    pose.pose.pose.orientation.y,
    pose.pose.pose.orientation.z,
    pose.pose.pose.orientation.w
  ])
  time = pose.header.stamp

  sample = (x, y, yaw, time)
  with lock:
    buffer.append(sample)
  
def sample():
  temp_x = 0
  temp_y = 0
  temp_yaw = 0
  time = 0

  with lock:
    for sample in buffer:
      temp_x += sample[0]
      temp_y += sample[1]
      temp_yaw += sample[2]
    
    if (len(buffer) != 0):
      temp_x /= len(buffer)
      temp_y /= len(buffer)
      temp_yaw /= len(buffer)

  odom = Odometry()
  odom.header.stamp = rospy.Time.now()
  odom.header.frame_id = "map"
  odom.pose.pose.position.x = temp_x
  odom.pose.pose.position.y = temp_y
  x, y, z, w = quaternion_from_euler(0, 0, temp_yaw)
  odom.pose.pose.orientation.x = x
  odom.pose.pose.orientation.y = y
  odom.pose.pose.orientation.z = z
  odom.pose.pose.orientation.w = w
  odom.twist.twist.linear.x = 0
  odom.twist.twist.linear.y = 0
  odom.twist.twist.linear.z = 0
  odom.twist.twist.angular.x = 0
  odom.twist.twist.angular.y = 0
  odom.twist.twist.angular.z = 0
  pub.publish(odom)

rospy.init_node('odom_generator')

pub = rospy.Publisher('odom', Odometry, queue_size=1)

rospy.Subscriber('pose', PoseWithCovarianceStamped, callback)

rate = rospy.Rate(30.0)
while not rospy.is_shutdown():
    sample()
    try:
        rate.sleep()
    except rospy.ROSInterruptException:
        pass