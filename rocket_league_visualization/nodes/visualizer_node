#!/usr/bin/env python3

"""Node to run the visualizer with ROS bindings.
License:
  BSD 3-Clause License
  Copyright (c) 2020, Autonomous Robotics Club of Purdue (Purdue ARC)
  All rights reserved.
  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:
  1. Redistributions of source code must retain the above copyright notice, this
     list of conditions and the following disclaimer.
  2. Redistributions in binary form must reproduce the above copyright notice,
     this list of conditions and the following disclaimer in the documentation
     and/or other materials provided with the distribution.
  3. Neither the name of the copyright holder nor the names of its
     contributors may be used to endorse or promote products derived from
     this software without specific prior written permission.
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

TODO:
- Scale to support multiple cars
"""

# 3rd party modules
from std_msgs.msg import Float32
from nav_msgs.msg import Odometry
import os
import rospy
from std_srvs.srv import Empty, EmptyResponse
from threading import Lock

# Local library
import visualizer
from geometry_msgs.msg import Twist, PoseWithCovarianceStamped
from rocket_league_msgs.msg import Target, Path, PathError, Waypoint, MatchStatus


class VisualizerROS(object):
    """ROS wrapper for the visualizer."""

    def __init__(self):
        rospy.init_node("visualizer")

        # Collecting global parameters
        render_enabled = rospy.get_param("RENDER_ENABLED")
        field_width = rospy.get_param("FIELD_WIDTH")
        field_length = rospy.get_param("FIELD_LENGTH")
        goal_width = rospy.get_param("GOAL_WIDTH")
        ball_radius = rospy.get_param("BALL_RADIUS")
        car_width = rospy.get_param("CAR_WIDTH")
        car_length = rospy.get_param("CAR_LENGTH")

        # Creating pygame render
        self.window = visualizer.Window(field_width, field_length)

        # Collecting private parameters
        self.frame_id = rospy.get_param("~FRAME_ID", "map")
        self.timeout = rospy.get_param("~TIMEOUT", 10)
        rate = rospy.Rate(rospy.get_param("~RATE", 30))

        car_img_path = rospy.get_param("~CAR_IMG_PATH", None)
        if car_img_path is not None:
            self.car_id = 1
            self.window.createAsset(
                self.car_id, car_img_path, car_width, car_length)

        ball_img_path = rospy.get_param("~BALL_IMG_PATH", None)
        if ball_img_path is not None:
            self.ball_id = 2
            self.window.createAsset(
                self.ball_id, ball_img_path, ball_radius * 2, ball_radius * 2
            )

        self.lock = Lock()
        self.last_command = None
        self.last_time = None
        self.path = None

        # Subscribers
        rospy.Subscriber("ball/odom", Odometry, self.ball_odom_cb)
        rospy.Subscriber("car0/odom", Odometry, self.car_odom_cb)
        rospy.Subscriber("car0/path", Path, self.path_arr_cb)
        rospy.Subscriber(
            "car0/lookahead_pnt", PoseWithCovarianceStamped, self.lookahead_cb
        )

        while not rospy.is_shutdown():
            self.loop_once()
            try:
                rate.sleep()
            except rospy.ROSInterruptException:
                pass

    def car_odom_cb(self, odom_msg):
        x = odom_msg.pose.pose.position.x
        y = odom_msg.pose.pose.position.y
        self.window.updateAssetPos(self.car_id, x, y)

    def ball_odom_cb(self, odom_msg):
        x = odom_msg.pose.pose.position.x
        y = odom_msg.pose.pose.position.y
        self.window.updateAssetPos(self.ball_id, x, y)

    def path_arr_cb(self, path_arr_msg):
        """Callback for path array messages."""
        self.path = path_arr_msg.waypoint
        self.path_points = []

        for point in self.path:
            x = point.pose.position.x
            y = point.pose.position.y
            self.path_points.append([x, y])

        if self.path_points is None:
            self.path_points = [[0, 0]]

    def lookahead_cb(self, pose_msg):
        """Callback for lookahead_pnt messages."""
        x = pose_msg.pose.pose.position.x
        y = pose_msg.pose.pose.position.y
        self.lookahead = [x, y]

    def loop_once(self):
        """Main loop."""
        self.window.show()


if __name__ == "__main__":
    VisualizerROS()
