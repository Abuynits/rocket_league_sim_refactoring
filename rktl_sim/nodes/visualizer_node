#!/usr/bin/env python3
"""Node to run the visualizer with ROS bindings.
License:
  BSD 3-Clause License
  Copyright (c) 2020, Autonomous Robotics Club of Purdue (Purdue ARC)
  All rights reserved.

TODO:
- Scale to support multiple cars
"""

# 3rd party modules
import math
from nav_msgs.msg import Odometry
import rospy
from tf.transformations import euler_from_quaternion
from threading import Lock

# Local library
import visualizer
from geometry_msgs.msg import PoseWithCovarianceStamped
from rktl_msgs.msg import Path


class VisualizerROS(object):
    """ROS wrapper for the visualizer."""

    def __init__(self):
        rospy.init_node("visualizer")

        # Collecting global parameters
        field_width = rospy.get_param('/field/width')
        field_length = rospy.get_param('/field/length')
        goal_width = rospy.get_param('/field/goal/width')
        wall_thickness = rospy.get_param('/field/wall_thickness')
        ball_radius = rospy.get_param("/ball/radius")
        car_width = rospy.get_param("/cars/width")
        car_length = rospy.get_param("/cars/length")

        # Creating pygame render
        self.window = visualizer.Window(
            field_width, field_length, wall_thickness)

        # Collecting private parameters
        self.frame_id = rospy.get_param("~frame_id", "map")
        self.timeout = rospy.get_param("~timeout", 10)
        rate = rospy.Rate(rospy.get_param("~rate", 20))

        # Setting up field
        id = 0
        field_img_path = rospy.get_param("~media/field", None)
        if field_img_path is not None:
            self.window.createAsset(
                id, field_width, field_length, imgPath=field_img_path,
                initPos=(0, 0))
            id += 1

        # Setting up sidewalls
        sidewall_length = field_length + (wall_thickness * 2.0)
        self.window.createAsset(
            id, wall_thickness, sidewall_length, color=(0, 0, 0),
            initPos=(0., (field_width + wall_thickness) / 2.))
        id += 1
        
        self.window.createAsset(
            id, wall_thickness, sidewall_length, color=(0, 0, 0),
            initPos=(0., -(field_width + wall_thickness) / 2.))
        id += 1

        # Setting up backwalls
        backwall_width = (field_width - goal_width) / 2.
        backwall_x = (field_length + wall_thickness) / 2.
        backwall_y = (field_width / 2.) - (backwall_width / 2.)
        self.window.createAsset(
            id, backwall_width, wall_thickness, color=(0, 0, 0),
            initPos=(backwall_x, backwall_y))
        id += 1

        self.window.createAsset(
            id, backwall_width, wall_thickness, color=(0, 0, 0),
            initPos=(backwall_x, -backwall_y))
        id += 1
    
        self.window.createAsset(
            id, backwall_width, wall_thickness, color=(0, 0, 0),
            initPos=(-backwall_x, backwall_y))
        id += 1

        self.window.createAsset(
            id, backwall_width, wall_thickness, color=(0, 0, 0),
            initPos=(-backwall_x, -backwall_y))
        id += 1

        # Setting up car
        car_img_path = rospy.get_param("~media/car", None)
        if car_img_path is not None:
            self.car_id = id
            self.window.createAsset(
                self.car_id, car_width, car_length, imgPath=car_img_path)
            id += 1

        # Setting up ball
        ball_img_path = rospy.get_param("~media/ball", None)
        if ball_img_path is not None:
            self.ball_id = id
            self.window.createAsset(
                self.ball_id, ball_radius * 2, ball_radius * 2, imgPath=ball_img_path)
            id += 1

        # Setting up goals
        self.goal1_id = id
        self.window.createAsset(
            self.goal1_id, goal_width, wall_thickness, color=(255, 255, 255))
        self.window.updateAssetPos(
            self.goal1_id, (field_length / 2) + (wall_thickness / 2), 0)
        id += 1
        
        self.goal2_id = id
        self.window.createAsset(
            self.goal2_id, goal_width, wall_thickness, color=(255, 255, 255))
        self.window.updateAssetPos(
            self.goal2_id, -((field_length / 2) + (wall_thickness / 2)), 0)
        id += 1

        self.lock = Lock()
        self.last_time = None
        self.path = None

        # Subscribers
        rospy.Subscriber("ball/odom", Odometry, self.ball_odom_cb)
        rospy.Subscriber("cars/car0/odom", Odometry, self.car_odom_cb)
        rospy.Subscriber("cars/car0/path", Path, self.path_arr_cb)
        rospy.Subscriber(
            "cars/car0/lookahead_pnt", PoseWithCovarianceStamped, self.lookahead_cb
        )

        while not rospy.is_shutdown():
            try:
                self.window.show()
            except self.window.ShutdownError:
                exit()
            try:
                rate.sleep()
            except rospy.ROSInterruptException:
                pass

    def car_odom_cb(self, odom_msg):
        x = odom_msg.pose.pose.position.x
        y = odom_msg.pose.pose.position.y
        orient = odom_msg.pose.pose.orientation
        quat = [orient.x, orient.y, orient.z, orient.w]
        heading = euler_from_quaternion(quat)[2]
        heading = heading * 180. / math.pi
        self.window.updateAssetPos(self.car_id, x, y)
        self.window.updateAssetAngle(self.car_id, heading)

    def ball_odom_cb(self, odom_msg):
        x = odom_msg.pose.pose.position.x
        y = odom_msg.pose.pose.position.y
        self.window.updateAssetPos(self.ball_id, x, y)

    def path_arr_cb(self, path_arr_msg):
        """Callback for path array messages."""
        self.path = path_arr_msg.waypoint
        self.path_points = []

        for point in self.path:
            x = point.pose.position.x
            y = point.pose.position.y
            self.path_points.append((x, y))

        if self.path_points is None:
            self.path_points = [(0, 0)]

    def lookahead_cb(self, pose_msg):
        """Callback for lookahead_pnt messages."""
        x = pose_msg.pose.pose.position.x
        y = pose_msg.pose.pose.position.y
        self.lookahead = (x, y)


if __name__ == "__main__":
    VisualizerROS()
