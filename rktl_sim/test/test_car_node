#!/usr/bin/env python3
"""Tests control of the car matches expected model.
License:
  BSD 3-Clause License
  Copyright (c) 2020, Autonomous Robotics Club of Purdue (Purdue ARC)
  All rights reserved.
"""

import unittest
import rospy
import sys
import time
from nav_msgs.msg import Odometry
from std_msgs.msg import *
from std_srvs.srv import Empty
from rktl_sim.srv import SetSimThrottle, SetSimThrottleRequest

class TestCar(unittest.TestCase):
  set_throttle = None
  sim_reset = None
  throttle_pub = None

  @classmethod
  def setUpClass(cls):
    rospy.init_node('test_car_node')

    rospy.wait_for_service('set_sim_throttle')
    cls.set_throttle = rospy.ServiceProxy('set_sim_throttle', SetSimThrottle)

    rospy.wait_for_service('sim_reset')
    cls.sim_reset = rospy.ServiceProxy('sim_reset', Empty)

    cls.throttle_pub = rospy.Publisher('effort/throttle',
      Float32, latch=True)

  def test_throttle_resp_1(self):
    try:
      self.sim_reset()
    except rospy.ServiceException as _:
      self.fail('failed to reset sim')

    try:
      resp = self.set_throttle(SetSimThrottleRequest(0.25))
      start_msg = rospy.wait_for_message('car0/odom', Odometry)
      while (start_msg.header.stamp - resp.stamp) < rospy.Duration(0.0):
        start_msg = rospy.wait_for_message('car0/odom', Odometry)

      start_stamp = start_msg.header.stamp
      end_msg = rospy.wait_for_message('car0/odom', Odometry)
      dur = rospy.Duration.from_sec(1.0)
      while (end_msg.header.stamp - start_stamp) < dur:
        end_msg = rospy.wait_for_message('car0/odom', Odometry)

      dist = end_msg.pose.pose.position.x - start_msg.pose.pose.position.x
      self.assertLess(dist, 1.2, 'car moving too fast: ' +
        f'expected distance {1.12}, actual distance {dist}')
    
      self.assertGreater(dist, 1.0, f'car moving too slow: ' +
        f'expected distance {1.12}, actual distance {dist}')
  
    except rospy.ServiceException as _:
      self.fail('failed to set throttle')

  def test_throttle_resp_2(self):
    try:
      self.sim_reset()
    except rospy.ServiceException as _:
      self.fail('failed to reset sim')

    try:
      self.set_throttle(SetSimThrottleRequest(0.0))
    except rospy.ServiceException as _:
      self.fail('failed to set throttle')

    try:
      resp = self.set_throttle(SetSimThrottleRequest(0.5))
      start_msg = rospy.wait_for_message('car0/odom', Odometry)
      while (start_msg.header.stamp - resp.stamp) < rospy.Duration(0.0):
        start_msg = rospy.wait_for_message('car0/odom', Odometry)

      start_stamp = start_msg.header.stamp
      end_msg = rospy.wait_for_message('car0/odom', Odometry)
      dur = rospy.Duration.from_sec(1.0)
      while (end_msg.header.stamp - start_stamp) < dur:
        end_msg = rospy.wait_for_message('car0/odom', Odometry)

      dist = end_msg.pose.pose.position.x - start_msg.pose.pose.position.x
      self.assertLess(dist, 4.6, 'car moving too fast: ' +
        f'expected distance {4.5}, actual distance {dist}')
    
      self.assertGreater(dist, 4.4, f'car moving too slow: ' +
        f'expected distance {4.5}, actual distance {dist}')
  
    except rospy.ServiceException as _:
      self.fail('failed to set throttle')

if __name__ == '__main__':
  import rostest
  rostest.run('rktl_sim', 'test_car_node', TestCar)