#!/usr/bin/env python3

"""
Convenience node to log model weights when training.

License:
  BSD 3-Clause License
  Copyright (c) 2021, Autonomous Robotics Club of Purdue (Purdue ARC)
  All rights reserved.
  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:
  1. Redistributions of source code must retain the above copyright notice, this
     list of conditions and the following disclaimer.
  2. Redistributions in binary form must reproduce the above copyright notice,
     this list of conditions and the following disclaimer in the documentation
     and/or other materials provided with the distribution.
  3. Neither the name of the copyright holder nor the names of its
     contributors may be used to endorse or promote products derived from
     this software without specific prior written permission.
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

import rospy
from diagnostic_msgs.msg import DiagnosticStatus, KeyValue
import matplotlib.pyplot as plt

class Plotter(object):
    """Log model weights during training."""
    def __init__(self):
        rospy.init_node('model_progress_plotter')

        # Constants
        self.LOG_DIR = rospy.get_param('~log_dir')
        self.FREQUENCY = rospy.get_param('~log_freq', 100)
        self.BUFF_SIZE = rospy.get_param('~buffer_size', 10)

        self.history = None

        # Subscribers
        rospy.Subscriber('training_stats', DiagnosticStatus, self.progress_cb)

        rospy.spin()

    def progress_cb(self, progress_msg):
        """Track training progress and save when configured to."""
        episode = None
        for kv in progress_msg.values:
            if kv.key == "episode":
                episode = int(kv.value)

        if episode is not None:
            if self.history is None:
                self.history = [progress_msg.values]
            else:
                self.history.append(progress_msg.values)

            if episode % self.FREQUENCY == 0:
                self.plot()
        else:
            rospy.logerr("Bad progress message.")

    def plot(self):
        """Create plot and save"""
        fig = plt.figure(figsize=(11,8.5))

        measurements = []
        for kv in self.history[0]:
            if kv.key != "episode":
                measurements.append(kv.key)

        x = []
        for msg in self.history:
            for kv in msg:
                if kv.key == "episode":
                    x.append(int(kv.value))

        for key in measurements:
            y = []
            buffer = []
            y_max = None
            y_min = None
            for msg in self.history:
                for kv in msg:
                    if kv.key == key:
                        val = float(kv.value)
                        buffer.append(val)
                        if len(buffer) > self.BUFF_SIZE:
                            buffer.pop(0)
                        avg = 0
                        for i in buffer:
                            avg += i
                        avg /= float(len(buffer))
                        y.append(avg)
                        if y_max is None or val > y_max:
                            y_max = val
                        if y_min is None or val < y_min:
                            y_min = val

            y_range = y_max - y_min
            if y_range > 0:
                plt.plot(x, [(i-y_min)/y_range for i in y], label=f"{key} => [{y_min :0.2e}, {y_max :0.2e}]")

        plt.title("Training Log")
        plt.xlabel("Episodes")
        plt.legend()
        rospy.loginfo(f"Saving training progress to {self.LOG_DIR}plot.png")
        plt.savefig(self.LOG_DIR + "plot.png")
        plt.close(fig)

if __name__ == "__main__":
    Plotter()
