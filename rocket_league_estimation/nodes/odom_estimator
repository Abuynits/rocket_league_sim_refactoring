#!/usr/bin/env python
"""Very simple node to estimate odometry from poses over time.
License:
  BSD 3-Clause License
  Copyright (c) 2020, Autonomous Robotics Club of Purdue (Purdue ARC)
  All rights reserved.
  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:
  1. Redistributions of source code must retain the above copyright notice, this
     list of conditions and the following disclaimer.
  2. Redistributions in binary form must reproduce the above copyright notice,
     this list of conditions and the following disclaimer in the documentation
     and/or other materials provided with the distribution.
  3. Neither the name of the copyright holder nor the names of its
     contributors may be used to endorse or promote products derived from
     this software without specific prior written permission.
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

# Python
from math import sin, cos

# ROS
import rospy
from geometry_msgs.msg import PoseWithCovarianceStamped
from nav_msgs.msg import Odometry
from tf.transformations import euler_from_quaternion

class OdomEstimator(object):
    """Simple node that derives velocity from position."""
    def __init__(self):
        rospy.init_node('pose_estimation')

        # variables to store previous pose and timestamp
        self.last_pose = None
        self.last_time = None

        self.x_buffer = []
        self.y_buffer = []
        self.theta_buffer = []

        # params
        self.BASE_LINK = rospy.get_param('~base_link', 'base_link')
        self.BUFFER_SIZE = rospy.get_param('~buffer_size', 3)

        # publishers
        self.odom_pub = rospy.Publisher('odom', Odometry, queue_size=1)

        # subscribers
        rospy.Subscriber('pose', PoseWithCovarianceStamped, self.pose_cb)

        rospy.spin()

    def pose_cb(self, pose_msg):
        """Callback for detection messages."""
        # extract bot position & angle
        x = pose_msg.pose.pose.position.x
        y = pose_msg.pose.pose.position.y
        quat = (pose_msg.pose.pose.orientation.x,
                pose_msg.pose.pose.orientation.y,
                pose_msg.pose.pose.orientation.z,
                pose_msg.pose.pose.orientation.w)
        (__, __, theta) = euler_from_quaternion(quat)

        # publish odom if there is a previous timestamp
        if self.last_time is not None:
            # create new odometry message
            odom_msg = Odometry()
            odom_msg.header = pose_msg.header
            odom_msg.child_frame_id = self.BASE_LINK
            odom_msg.pose = pose_msg.pose

            # deltas to calculate twist velocities
            dx = x - self.last_pose[0]
            dy = y - self.last_pose[1]
            dt = (pose_msg.header.stamp - self.last_time).to_sec()
            d_theta = theta - self.last_pose[2]

            # this is gross, but we're gonna do it
            dx /= dt
            dy /= dt
            d_theta /= dt

            # this is also gross
            # add to buffers
            self.x_buffer.append(dx*cos(theta) + dy*sin(theta))
            self.y_buffer.append(-dx*sin(theta) + dy*cos(theta))
            self.theta_buffer.append(d_theta)

            # trim buffers
            if len(self.x_buffer) > self.BUFFER_SIZE:
                self.x_buffer.pop(0)
            if len(self.y_buffer) > self.BUFFER_SIZE:
                self.y_buffer.pop(0)
            if len(self.theta_buffer) > self.BUFFER_SIZE:
                self.theta_buffer.pop(0)

            # get averages
            dx = 0
            dy = 0
            d_theta = 0
            for i in self.x_buffer:
                dx += i / len(self.x_buffer)
            for i in self.y_buffer:
                dy += i / len(self.y_buffer)
            for i in self.theta_buffer:
                d_theta += i / len(self.theta_buffer)

            # set odom velocities
            odom_msg.twist.twist.linear.x = dx
            odom_msg.twist.twist.linear.y = dy
            odom_msg.twist.twist.angular.z = d_theta

            # publish odom message
            self.odom_pub.publish(odom_msg)

        # reset last pose and timestamp
        self.last_time = pose_msg.header.stamp
        self.last_pose = (x, y, theta)

if __name__ == "__main__":
    OdomEstimator()
