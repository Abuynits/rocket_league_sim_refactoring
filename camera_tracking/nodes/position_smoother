#!/usr/bin/env python3  
"""Very simple node to estimate odometry from poses over time.
License:
  BSD 3-Clause License
  Copyright (c) 2020, Autonomous Robotics Club of Purdue (Purdue ARC)
  All rights reserved.
  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:
  1. Redistributions of source code must retain the above copyright notice, this
     list of conditions and the following disclaimer.
  2. Redistributions in binary form must reproduce the above copyright notice,
     this list of conditions and the following disclaimer in the documentation
     and/or other materials provided with the distribution.
  3. Neither the name of the copyright holder nor the names of its
     contributors may be used to endorse or promote products derived from
     this software without specific prior written permission.
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

buffer_size = 10

# ROS
import rospy
from geometry_msgs.msg import PoseWithCovarianceStamped

import collections
import rospy
from geometry_msgs.msg import PoseWithCovarianceStamped, Pose
from tf.transformations import euler_from_quaternion, quaternion_from_euler
from threading import Lock

buffer = collections.deque(maxlen=buffer_size)
lock = Lock()

def callback(pose):
  x = pose.pose.pose.position.x
  y = pose.pose.pose.position.y
  __, __, yaw = euler_from_quaternion([
    pose.pose.pose.orientation.x,
    pose.pose.pose.orientation.y,
    pose.pose.pose.orientation.z,
    pose.pose.pose.orientation.w
  ])

  sample = (x, y, yaw)
  with lock:
    buffer.append(sample)
  
def sample():
  temp_x = 0
  temp_y = 0
  temp_yaw = 0

  with lock:
    for sample in buffer:
      temp_x += sample[0]
      temp_y += sample[1]
      temp_yaw += sample[2]

    temp_x /= buffer_size
    temp_y /= buffer_size
    temp_yaw /= buffer_size

  pose = PoseWithCovarianceStamped()
  pose.header.stamp = rospy.Time.now()
  pose.header.frame_id = "map"
  pose.pose.pose.position.x = temp_x
  pose.pose.pose.position.y = temp_y
  x, y, z, w = quaternion_from_euler(0, 0, temp_yaw)
  pose.pose.pose.orientation.x = x
  pose.pose.pose.orientation.y = y
  pose.pose.pose.orientation.z = z
  pose.pose.pose.orientation.w = w
  pub.publish(pose)

rospy.init_node('car_smoother')

pub = rospy.Publisher('car0/smooth_pose', PoseWithCovarianceStamped, queue_size=1)

rospy.Subscriber('car0/pose', PoseWithCovarianceStamped, callback)

rate = rospy.Rate(30.0)
while not rospy.is_shutdown():
    sample()
    try:
        rate.sleep()
    except rospy.ROSInterruptException:
        pass