#!/usr/bin/env python3
"""Node to estimate odometry from poses over time using a Kalman filter.
License:
  BSD 3-Clause License
  Copyright (c) 2020, Autonomous Robotics Club of Purdue (Purdue ARC)
  All rights reserved.
"""

# ROS
import rospy
from nav_msgs.msg import Odometry
from geometry_msgs.msg import PoseWithCovarianceStamped
from tf.transformations import euler_from_quaternion, quaternion_from_euler

from collections import deque
from angles import shortest_angular_distance as sad
from math import sin, cos, atan2

class KalmanFilter(object):
    """Class to estimate pose and velocity using Kalman filter."""
    def __init__(self):
        rospy.init_node('kalman_odom_filter')

        # constants
        self.MAP_FRAME = rospy.get_param('~frame_ids/map', 'map')
        self.BODY_FRAME = rospy.get_param('~frame_ids/body', 'base_link')

        # OTHER CONSTANTS HERE

        # variables
        # VARIABLES HERE

        # pubs / subs
        self.odom_pub = rospy.Publisher('odom', Odometry, queue_size=1)
        rospy.Subscriber('pose', PoseWithCovarianceStamped, self.pose_cb)

        # main loop
        rospy.spin()

    def pose_cb(self, pose_msg):
        """Callback for new poses."""
        assert(pose_msg.header.frame_id == self.MAP_FRAME)

        # deconstruct message
        t = pose_msg.header.stamp
        x = pose_msg.pose.pose.position.x
        y = pose_msg.pose.pose.position.y
        __, __, yaw = euler_from_quaternion([
            pose_msg.pose.pose.orientation.x,
            pose_msg.pose.pose.orientation.y,
            pose_msg.pose.pose.orientation.z,
            pose_msg.pose.pose.orientation.w
        ])
        sample = (t, x, y, yaw)

        # USE SAMPLE TO GET ESTIMATE

        # get current position and velocity estimates
        x = None
        y = None
        yaw = None
        vx = None
        vy = None
        omega = None

        # convert velocity to body frame (if not already)
        body_vx = vx*cos(yaw) + vy*sin(yaw)
        body_vy = vy*cos(yaw) - vx*sin(yaw)

        # publish message
        odom_msg = Odometry()
        odom_msg.header = pose_msg.header
        odom_msg.child_frame_id = self.BODY_FRAME
        odom_msg.pose.pose.position.x = x
        odom_msg.pose.pose.position.y = y
        x, y, z, w = quaternion_from_euler(0, 0, yaw)
        odom_msg.pose.pose.orientation.x = x
        odom_msg.pose.pose.orientation.y = y
        odom_msg.pose.pose.orientation.z = z
        odom_msg.pose.pose.orientation.w = w
        odom_msg.twist.twist.linear.x = body_vx
        odom_msg.twist.twist.linear.y = body_vy
        odom_msg.twist.twist.angular.z = omega
        self.odom_pub.publish(odom_msg)

if __name__ == "__main__":
    KalmanFilter()