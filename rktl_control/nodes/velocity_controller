#!/usr/bin/env python
"""Node to run the closed loop velocity controller.
License:
  BSD 3-Clause License
  Copyright (c) 2020, Autonomous Robotics Club of Purdue (Purdue ARC)
  All rights reserved.
"""

# package
from pid_control import PIDController

# ROS
import rospy
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
from std_msgs.msg import Float32

class VelocityControllerROS(object):
    """ROS wrapper for the snake game."""
    def __init__(self):
        rospy.init_node('velocity_control')

        self.last_time = None
        self.reference = None
        self.state = None

        self.throttle_controller = PIDController(
            rospy.get_param('~throttle/gains/kp'),
            rospy.get_param('~throttle/gains/ki'),
            rospy.get_param('~throttle/gains/kd'),
            rospy.get_param('~throttle/anti_windup'),
            rospy.get_param('~throttle/deadband')
        )
        self.throttle_static_friction = rospy.get_param('~throttle/static_friction')
        self.throttle_kff = rospy.get_param('~throttle/gains/kff')
        self.throttle_limits = (
            rospy.get_param('~throttle/limits/min'),
            rospy.get_param('~throttle/limits/max')
        )

        self.steering_controller = PIDController(
            rospy.get_param('~steering/gains/kp'),
            rospy.get_param('~steering/gains/ki'),
            rospy.get_param('~steering/gains/kd'),
            rospy.get_param('~steering/anti_windup'),
            rospy.get_param('~steering/deadband')
        )
        self.steering_static_friction = rospy.get_param('~steering/static_friction')
        self.steering_kff = rospy.get_param('~steering/gains/kff')
        self.steering_limits = (
            rospy.get_param('~steering/limits/min'),
            rospy.get_param('~steering/limits/max')
        )

        self.timeout = rospy.Duration(rospy.get_param('~timeout', 1.0)) # Seconds
        rate = rospy.Rate(rospy.get_param('~rate', 30)) # Hz

        # Publishers
        # update this to one message losers
        self.throttle_pub = rospy.Publisher('effort/throttle', Float32, queue_size=1) 
        self.steering_pub = rospy.Publisher('effort/steering', Float32, queue_size=1)

        # Subscribers
        rospy.Subscriber('cmd', Twist, self.command_cb)
        rospy.Subscriber('odom', Odometry, self.odom_cb)

        while not rospy.is_shutdown():
            self.loop_once()
            try:
                rate.sleep()
            except rospy.ROSInterruptException:
                pass

    def command_cb(self, command_msg):
        """Callback for command messages for car."""
        # atomic operation
        self.reference = (rospy.Time.now(), command_msg.linear.x, command_msg.angular.z)

    def odom_cb(self, odom_msg):
        """Callback for odom messages from car."""
        # atomic operation
        self.state = (odom_msg.header.stamp,
            odom_msg.twist.twist.linear.x,
            odom_msg.twist.twist.angular.z)

    def loop_once(self):
        """Main loop."""
        now = rospy.Time.now()

        if (self.last_time is not None
                and self.reference is not None
                and self.state is not None):
            # atomic operations
            (time_ref, velocity_ref, yaw_rate_ref) = self.reference
            (time_est, velocity_est, yaw_rate_est) = self.state

            if ((now - time_ref) < self.timeout
                    and (now - time_est) < self.timeout):

                # feed forward
                throttle_effort = velocity_ref * self.throttle_kff
                steering_effort = yaw_rate_ref * self.steering_kff

                # static friction
                if abs(velocity_ref) > 0.05:
                    throttle_effort += velocity_ref / abs(velocity_ref) * self.throttle_static_friction
                if abs(yaw_rate_ref) > 0.05:
                    steering_effort += yaw_rate_ref / abs(yaw_rate_ref) * self.steering_static_friction

                # feedback
                delta_t = (now - self.last_time).to_sec()
                throttle_effort += self.throttle_controller.step(
                    velocity_ref - velocity_est, delta_t)
                steering_effort += self.steering_controller.step(
                    yaw_rate_ref - yaw_rate_est, delta_t)

                self.throttle_pub.publish(self.clamp(throttle_effort, self.throttle_limits))
                self.steering_pub.publish(-self.clamp(steering_effort, self.steering_limits))

        self.last_time = now

    def clamp(self, value, limits):
        """Clamp a value between max and min."""
        return max(min(value, limits[1]), limits[0])

if __name__ == "__main__":
    VelocityControllerROS()
