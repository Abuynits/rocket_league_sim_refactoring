#!/usr/bin/env python3

import math
import rospy
from rktl_planner import BezierPath
from tf.transformations import quaternion_from_euler
from std_msgs.msg import Duration
from nav_msgs.msg import Odometry
from geometry_msgs.msg import Pose
from rktl_msgs.msg import MultiBezierPath as MultiBezierPathMsg, Path as PathMsg
from std_srvs.srv import Empty, EmptyRequest, EmptyResponse
from rktl_planner.srv import CreateBezierPath, CreateBezierPathRequest


class SimpleController:
    def __init__(self):
        rospy.init_node('simple_controller')

        self.car_odom_topic = rospy.get_param('~car_odom_topic', '/car0/odom')
        self.ball_odom_topic = rospy.get_param(
            '~ball_odom_topic', '/ball/odom')
        self.reset_service = rospy.get_param(
            '~reset_service', 'reset_controller')
        self.path_service = rospy.get_param(
            '~path_service', 'create_bezier_path')
        self.linear_path_topic = rospy.get_param('~path_topic', 'path')
        self.bezier_path_topic = rospy.get_param(
            '~bezier_path_topic', 'bezier_path')

        self.car_odom = Odometry()
        self.ball_odom = Odometry()

        self.car_sub = rospy.Subscriber(
            self.car_odom_topic, Odometry, self.car_odom_callback)
        self.ball_sub = rospy.Subscriber(
            self.ball_odom_topic,   Odometry, self.ball_odom_callback)
        self.reset_server = rospy.Service(
            self.reset_service, Empty, self.reset)
        self.path_client = rospy.ServiceProxy(
            self.path_service, CreateBezierPath)
        if rospy.has_param('~linear_path_topic'):
            self.linear_path_pub = rospy.Publisher(rospy.get_param(
                '~linear_path_topic'), PathMsg, queue_size=1, latch=True)
        else:
            self.linear_path_pub = None
        if rospy.has_param('~bezier_path_topic'):
            self.bezier_path_pub = rospy.Publisher(rospy.get_param(
                '~bezier_path_topic'), MultiBezierPathMsg, queue_size=1, latch=True)
        else:
            self.bezier_path_pub = None
        self.goal_pos = (rospy.get_param('/FIELD_LENGTH', 1) / 2, 0.)

        rospy.spin()

    def car_odom_callback(self, data: Odometry):
        self.car_odom = data

    def ball_odom_callback(self, data: Odometry):
        self.ball_odom = data

    def reset(self, _: EmptyRequest):
        req = CreateBezierPathRequest()
        req.bezier_segment_duration.data = rospy.Duration(0.5)
        req.linear_segment_duration.data = rospy.Duration(0.01)

        # Target 0 (car pos)
        pose0 = Pose()
        pose0.position.x = self.car_odom.pose.pose.position.x
        pose0.position.y = self.car_odom.pose.pose.position.y
        pose0.position.z = 0.0
        pose0.orientation = self.car_odom.pose.pose.orientation
        req.target_poses.append(pose0)
        req.target_speeds.append(0.5)
        req.target_durations.append(Duration(data=rospy.Duration(5.0)))

        # Target 1 (ball pos)
        final_vec_x = self.goal_pos[0] - self.ball_odom.pose.pose.position.x
        final_vec_y = self.goal_pos[1] - self.ball_odom.pose.pose.position.y
        final_quat = quaternion_from_euler(
            0., 0., math.atan2(final_vec_y, final_vec_x))
        final_vec_len = math.sqrt(final_vec_x ** 2 + final_vec_y ** 2)
        pose1 = Pose()
        pose1.position.x = self.ball_odom.pose.pose.position.x
        pose1.position.y = self.ball_odom.pose.pose.position.y
        pose1.position.z = 0.0
        pose1.orientation.x = final_quat[0]
        pose1.orientation.y = final_quat[1]
        pose1.orientation.z = final_quat[2]
        pose1.orientation.w = final_quat[3]
        req.target_poses.append(pose1)
        req.target_speeds.append(0.5)
        req.target_durations.append(Duration(data=rospy.Duration(1.0)))

        # Target 2 (stop)
        pose2 = Pose()
        pose2.position.x = pose1.position.x + final_vec_x / final_vec_len / 2
        pose2.position.y = pose1.position.y + final_vec_y / final_vec_len / 2
        pose2.position.z = 0.0
        pose2.orientation = pose2.orientation
        req.target_poses.append(pose2)
        req.target_speeds.append(0.0)

        # Send request
        res = self.path_client(req)
        if self.linear_path_pub:
            self.linear_path_pub.publish(res.linear_path)
        if self.bezier_path_pub:
            multi_bezier_path = MultiBezierPathMsg()
            multi_bezier_path.paths = res.bezier_paths
            self.bezier_path_pub.publish(multi_bezier_path)
        return EmptyResponse()


if __name__ == '__main__':
    SimpleController()
